#
# \file     docker-compose.yml
# \brief    Docker Compose script that describes the container needed to
#           run the development environment.
#
# Copyright (C) 2023 Deniz Eren (deniz.eren@outlook.com)
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program. If not, see <https://www.gnu.org/licenses/>.
#

services:
  term:
    hostname: emulation-dev
    container_name: qemu-build
    build:
      context: .
      dockerfile: ./qemu/tests/docker/dockerfiles/ubuntu2204.docker
    network_mode: host
    stdin_open: true
    tty: true
    restart: always
    cap_add:
      - NET_ADMIN
    devices:
      - "/dev/dri:/dev/dri"
      - "/dev/kvm:/dev/kvm"
    volumes:
      - ~/.ssh:/root/.ssh
      - /tmp/.X11-unix:/tmp/.X11-unix
      - ~/.Xauthority:/root/.Xauthority
      - /etc/localtime:/etc/localtime:ro
      - ~:/root/userhome
      - ./qemu:/root/qemu
      - ../qnx710/image/output:/root/Images
    environment:
      - LANG=en_US.UTF-8
      - LC_ALL=en_US.utf8
      - DISPLAY=${DISPLAY}
      - NO_AT_BRIDGE=1
    command: >
      sh -c "echo starting qemu build environment... \
             && cd /root/qemu &&
             ./configure &&
             cd build &&
             ninja &&
             ./qemu-system-x86_64 --version &&
             ./qemu-system-x86_64 \
                -k en-us \
                -drive id=disk,file=/root/Images/disk-raw,format=raw,if=none \
                -device ahci,id=ahci \
                -device ide-hd,drive=disk,bus=ahci.1 \
                -boot d \
                -object can-bus,id=canbus0 \
                -object can-bus,id=canbus1 \
                -object can-bus,id=canbus2 \
                -device pcm26d2ca_pci,canbus0=canbus0,canbus1=canbus1 \
                -device kvaser_pci,canbus=canbus2 \
                -object can-host-socketcan,id=canhost0,if=can0,canbus=canbus0,if=vcan0 \
                -object can-host-socketcan,id=canhost1,if=can1,canbus=canbus1,if=vcan1 \
                -object can-host-socketcan,id=canhost2,if=can2,canbus=canbus2,if=vcan2 \
                -m size=4096 \
                -nic user,hostfwd=tcp::6022-:22,hostfwd=tcp::8000-:8000 \
                -smp 2 \
                -enable-kvm &&
             tail -f /dev/null"
    runtime: nvidia
